#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Seiscomp3 module which merge origins inside events.

:copyright:
    EOST (Ã‰cole et Observatoire des Sciences de la Terre)
:license:
    GNU Lesser General Public License, Version 3
    (https://www.gnu.org/copyleft/lesser.html)
"""
import os
import sys
import traceback

from seiscomp3 import Client, Config, Core, DataModel, Logging, Seismology


def isclose(a, b, rel_tol=1e-09, abs_tol=0.0):
    return abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)


class OriginMerger(Client.Application):
    """
    Merge 2 origins inside events by agency names.
    """

    # Convert an evaluation mode string to the correct enum
    ENUM_EVALUATION_MODES = {
        'manual': DataModel.MANUAL,
        'automatic': DataModel.AUTOMATIC,
    }

    # Convert an evaluation mode enum to the correct string
    STR_EVALUATION_MODES = {
        DataModel.MANUAL: 'manual',
        DataModel.AUTOMATIC: 'automatic',
    }

    def __init__(self, argc, argv):
        Client.Application.__init__(self, argc, argv)
        self.setMessagingEnabled(True)
        self.setDatabaseEnabled(True, True)
        self.setDaemonEnabled(True)
        self.setMessagingUsername('')

        self.events = []
        self.primary_origin = None
        self.secondary_origin = None
        self.merged_origin = None
        # Store arrivals from station not in the inventory
        self.unknown_arrivals = []

        # Configuration variables (or arguments of the script)
        self.mode_test = False
        self.group_remove = None
        self.remove_merged_origin = False
        self.start_time = None
        self.begin_time = None
        self.event_id = None
        self.author = os.path.basename(__file__)
        self.primary_origin_agencyIDs = []
        self.secondary_origin_agencyIDs = []
        self.output_evaluation_mode = DataModel.AUTOMATIC
        self.input_evaluation_mode = None
        self.fixed_depth = None
        self.distance_cut_off = None
        self.ignore_initial_location = False

    def init(self):
        try:
            if not Client.Application.init(self):
                return False

            self.db_query = DataModel.DatabaseQuery(self.database())

            # Configure locator to be used
            self.locator = \
                Seismology.LocatorInterface.Create(self.locator_type)
            if not self.locator:
                Logging.error('Locator %s not available -> abort'
                              % self.locator_type)
                return False

            # Use this profile with the locator
            self.locator.init(self.configuration())
            self.locator.setProfile(self.locator_profile)

            return True
        except:
            info = traceback.format_exception(*sys.exc_info())
            for i in info:
                sys.stderr.write(i)
            raise

        return False

    def initConfiguration(self):
        try:
            if not Client.Application.initConfiguration(self):
                return False

            try:
                self.mode_test = self.configGetBool('mode.test')
            except Config.Exception:
                pass
            try:
                self.group_remove = \
                    self.configGetString('connection.groupRemove')
            except Config.Exception:
                pass
            try:
                self.primary_origin_agencyIDs = \
                    list(self.configGetStrings('input.primaryOriginAgencyIDs'))
            except Config.Exception:
                pass
            try:
                self.secondary_origin_agencyIDs = list(
                    self.configGetStrings('input.secondaryOriginAgencyIDs')
                )
            except Config.Exception:
                pass
            try:

                mode = self.configGetString('input.evaluationMode')
                self.input_evaluation_mode = \
                    OriginMerger.ENUM_EVALUATION_MODES[mode.lower()]
            except (Config.Exception, KeyError):
                pass
            try:
                self.author = self.configGetString('output.author')
            except Config.Exception:
                pass
            try:
                self.agencyID = self.configGetString('output.agencyID')
            except Config.Exception:
                pass
            try:
                str_mode = self.configGetString('output.evaluationMode')
                self.output_evaluation_mode = \
                    OriginMerger.ENUM_EVALUATION_MODES[str_mode.lower()]
            except (Config.Exception, KeyError):
                pass
            try:
                self.fixed_depth = self.configGetDouble('locator.fixedDepth')
            except Config.Exception:
                pass
            try:
                self.distance_cut_off = \
                    self.configGetDouble('locator.distanceCutOff')
            except Config.Exception:
                pass
            try:
                self.ignore_initial_location = \
                    self.configGetBool('locator.ignoreInitialLocation')
            except Config.Exception:
                pass
            try:
                self.locator_type = \
                    self.configGetString('locator.type')
            except Config.Exception:
                pass
            try:
                self.locator_profile = \
                    self.configGetString('locator.profile')
            except Config.Exception:
                pass

            return True
        except:
            info = traceback.format_exception(*sys.exc_info())
            for i in info:
                sys.stderr.write(i)
            raise

        return False

    def createCommandLineDescription(self):
        """
        Define parameters available at the command execution
        """
        self.commandline().addGroup('Mode')
        self.commandline().addOption(
            'Mode',
            'test,T',
            'test mode, do not write object in database')
        self.commandline().addOption(
            'Mode',
            'remove-merged-origin,R',
            "don't merge origin but remove merged origins")
        self.commandline().addGroup('Input')
        self.commandline().addStringOption(
            'Input',
            'begin',
            'specify the lower bound of the time interval '
            '(example: 2016-03-01T00:00:00.0)')
        self.commandline().addStringOption(
            'Input',
            'end',
            'specify the upper bound of the time interval '
            '(example: 2016-03-01T00:00:00.0)')
        self.commandline().addStringOption(
            'Input',
            'event,E',
            'event ID')
        self.commandline().addStringOption(
            'Input',
            'author,Au',
            'author')
        self.commandline().addStringOption(
            'Input',
            'evaluation-mode',
            'origin evaluation mode (manual or automatic)')
        self.commandline().addGroup('locator')
        self.commandline().addStringOption(
            'locator',
            'locator-type',
            'locator to use')
        self.commandline().addStringOption(
            'locator',
            'locator-profile',
            'locator profile')
        self.commandline().addStringOption(
            'locator',
            'fixed-depth',
            'fix depth')
        self.commandline().addStringOption(
            'locator',
            'distance-cut-off',
            'distance cut off')
        self.commandline().addOption(
            'locator',
            'ignore-initial-location',
            'ignore initial location')

    def validateParameters(self):
        """
        Retrieve parameters passed at the command execution
        """
        try:
            if Client.Application.validateParameters(self) is False:
                return False

            self.mode_test = self.commandline().hasOption('test')
            self.remove_merged_origin = \
                self.commandline().hasOption('remove-merged-origin')

            if self.commandline().hasOption('begin') \
                    and self.commandline().hasOption('end'):
                self.start_time = self.commandline().optionString('begin')
                self.end_time = self.commandline().optionString('end')
            if self.commandline().hasOption('event'):
                self.event_id = self.commandline().optionString('event')
            if self.commandline().hasOption('author'):
                self.author = self.commandline().optionString('author')
            if self.commandline().hasOption('evaluation-mode'):
                try:
                    str_mode = \
                        self.commandline().optionString('evaluation-mode')
                    self.output_evaluation_mode = \
                        OriginMerger.ENUM_EVALUATION_MODES[str_mode.lower()]
                except KeyError:
                    Logging.error('Wrong evaluation-mode parameter')

            if self.commandline().hasOption('locator-type'):
                self.locator_type = \
                    self.commandline().optionString('locator-type')
            if self.commandline().hasOption('locator-profile'):
                self.locator_profile = \
                    self.commandline().optionString('locator-profile')
            if self.commandline().hasOption('fixed-depth'):
                fixed_depth = self.commandline().optionString('fixed-depth')
                self.fixed_depth = float(fixed_depth)
            if self.commandline().hasOption('distance-cut-off'):
                dcu = self.commandline().optionString('distance_cut_off')
                self.distance_cut_off = float(dcu)
            self.ignore_initial_location = \
                self.commandline().hasOption('ignore-initial-location')
            return True
        except:
            info = traceback.format_exception(*sys.exc_info())
            for i in info:
                sys.stderr.write(i)
            raise

        return False

    def _retrieve_primary_origin(self, event):
        """
        Retrieve the primary origin.

        The origin must be the preferred origin of the event.
        """
        self.primary_origin = None

        type_info = DataModel.Origin.TypeInfo()
        origin_id = event.preferredOriginID()
        preferred_origin = self.db_query.loadObject(type_info, origin_id)
        preferred_origin = DataModel.Origin.Cast(preferred_origin)

        if not preferred_origin or not preferred_origin.creationInfo():
            Logging.warning('No preferred origin found')
            return

        agency_id = preferred_origin.creationInfo().agencyID()
        if agency_id not in self.primary_origin_agencyIDs:
            Logging.debug('Preferred origin not eligible, agency %s not in '
                          'PrimaryOriginAgencyIDs' % agency_id)
            return

        evaluation_mode = preferred_origin.evaluationMode()
        if (self.input_evaluation_mode is None or
                evaluation_mode == self.input_evaluation_mode):
            self.primary_origin = preferred_origin
            Logging.debug('Origin %s qualified for primary origin with '
                          'agencyID %s' % (origin_id, agency_id))
        else:
            try:
                str_mode = OriginMerger.STR_EVALUATION_MODES[evaluation_mode]
                Logging.debug('Preferred origin not eligible, evaluationMode '
                              '%s not allowed' % str_mode)
            except KeyError:
                Logging.debug('Preferred origin not eligible, evaluationMode '
                              'is unknown')

    def _retrieve_secondary_and_merged_origins(self, event):
        """
        Retrieve the secondary origin and the merged origins.
        """
        origins = [ori for ori in self.db_query.getOrigins(event.publicID())]
        # This DB query must be finished before we start iterating over
        # the events as otherwise we get nested queries, which are not
        # allowed.
        secondary_origin = None
        merged_origin = None

        for origin in origins:
            origin = DataModel.Origin.Cast(origin)

            if not origin:
                continue

            type_info = DataModel.Origin.TypeInfo()
            origin_id = origin.publicID()
            agency_id = origin.creationInfo().agencyID()
            author = origin.creationInfo().author()
            creation_time = origin.creationInfo().creationTime()
            evaluation_mode = origin.evaluationMode()

            if (merged_origin is None and author == self.author and
                    agency_id == self.agencyID):
                merged_origin = self.db_query.loadObject(type_info, origin_id)
                merged_origin = DataModel.Origin.Cast(merged_origin)

            if origin_id == self.primary_origin.publicID():
                Logging.debug('Origin %s not eligible, already qualified for '
                              'primary origin' % origin_id)
                continue

            if agency_id not in self.secondary_origin_agencyIDs:
                Logging.debug('Origin %s not eligible, agencyID %s not allowed'
                              % (origin_id, agency_id))
                continue

            if (self.input_evaluation_mode is not None and
                    self.input_evaluation_mode != evaluation_mode):
                try:
                    str_mode = \
                        OriginMerger.STR_EVALUATION_MODES[evaluation_mode]
                    Logging.debug('Origin %s not eligible, evaluationMode '
                                  '%s not allowed' % (origin_id, str_mode))
                except KeyError:
                    Logging.debug('Origin %s not eligible, evaluationMode is '
                                  'unknown' % origin_id)
                continue

            if (secondary_origin is not None and creation_time.get() <
                    secondary_origin.creationInfo().creationTime().get()):
                Logging.debug('Origin %s not eligible, earlier than already '
                              'qualified origin %s'
                              % (origin_id, secondary_origin.publicID()))
                continue

            secondary_origin = self.db_query.loadObject(type_info, origin_id)
            secondary_origin = DataModel.Origin.Cast(secondary_origin)
            Logging.debug('Origin %s qualified for secondary origin with '
                          'agencyID %s' % (origin_id, agency_id))

        self.secondary_origin = secondary_origin
        self.merged_origin = merged_origin

    def _copy_arrivals(self, origin_source, origin_dest):
        """
        Copy the arrival from an origin to the other.
        """
        # Load picks of the origin dest and store them in that list.
        # Usefull to know if an arrival is already in the origin
        # (with network/station/phase code).
        picks_dest = []
        for i in xrange(origin_dest.arrivalCount()):
            arrival_dest = origin_dest.arrival(i)
            pick_dest_id = arrival_dest.pickID()
            pick_dest = self.db_query.loadObject(DataModel.Pick.TypeInfo(),
                                                 pick_dest_id)
            pick_dest = DataModel.Pick.Cast(pick_dest)
            picks_dest.append(pick_dest)

        for i in xrange(origin_source.arrivalCount()):
            arrival = origin_source.arrival(i)
            new_arrival = DataModel.Arrival(arrival)

            pick_id = arrival.pickID()
            pick = self.db_query.loadObject(DataModel.Pick.TypeInfo(), pick_id)
            pick = DataModel.Pick.Cast(pick)
            network_code = pick.waveformID().networkCode()
            station_code = pick.waveformID().stationCode()

            # Check that the arrival is not already in the list
            for pick_dest in picks_dest:
                network_code_dest = pick_dest.waveformID().networkCode()
                station_code_dest = pick_dest.waveformID().stationCode()
                if pick.phaseHint().code() == pick_dest.phaseHint().code() \
                        and network_code == network_code_dest \
                        and station_code == station_code_dest:
                    # Arrival is already in the list, set a weight of 0 if the
                    # other arrival has a weight
                    if arrival_dest.weight() > 0:
                        new_arrival.setWeight(0)

            # Check that station is in inventory
            station = self.db_query.getStation(network_code, station_code,
                                               pick.time().value())
            if station is None:
                # Station is not in the inventory, arrival must be added
                # to the origin after the relocation.
                # But before check that arrival is already in the list
                # (same pick ID).
                if all(arrival.pickID() != new_arrival.pickID() for arrival in
                       self.unknown_arrivals):
                    self.unknown_arrivals.append(new_arrival)
            else:
                origin_dest.add(new_arrival)

    @staticmethod
    def _copy_magnitudes(origin_source, origin_dest):
        """
        Copy the magnitudes from an origin to the other.
        """
        for i in xrange(origin_source.magnitudeCount()):
            magnitude = origin_source.magnitude(i)
            new_magnitude = DataModel.Magnitude(magnitude)
            DataModel.PublicObject.GenerateId(new_magnitude)
            origin_dest.add(new_magnitude)

    @staticmethod
    def _copy_station_magnitudes(origin_source, origin_dest):
        """
        Copy the station magnitudes from an origin to the other.
        """
        for i in xrange(origin_source.stationMagnitudeCount()):
            station_magnitude = origin_source.stationMagnitude(i)
            new_station_magnitude = \
                DataModel.StationMagnitude(station_magnitude)
            DataModel.PublicObject.GenerateId(new_station_magnitude)
            origin_dest.add(new_station_magnitude)

    def _merge_origin(self, event):
        """
        Get the primary and secondary origins and return a new origin with the
        Arrivals, Magnitude and StationMagnitude of both origins.
        """
        self._retrieve_primary_origin(event)
        if not self.primary_origin:
            Logging.info('No primary origin found')
            return None

        self._retrieve_secondary_and_merged_origins(event)

        # Process merged origin
        if self.merged_origin:
            if self.remove_merged_origin:
                Logging.info('Remove merged origin %s'
                             % self.merged_origin.publicID())
                self._remove(event, self.merged_origin)
            elif not self.secondary_origin:
                Logging.info('No secondary origin found, remove merged '
                             'origin %s' % self.merged_origin.publicID())
                self._remove(event, self.merged_origin)
            elif (self.merged_origin.creationInfo().creationTime() <
                    self.secondary_origin.creationInfo().creationTime()):
                Logging.info('Secondary origin is newer than merged origin, '
                             'remove merged origin %s'
                             % self.merged_origin.publicID())
                self._remove(event, self.merged_origin)
            else:
                Logging.info('Origins %s and %s already merged'
                             % (self.primary_origin.publicID(),
                                self.merged_origin.publicID()))

            return None

        if self.remove_merged_origin:
            return None

        if not self.secondary_origin:
            Logging.info('No secondary origin found')
            return None

        new_origin = DataModel.Origin(self.primary_origin)

        self.unknown_arrivals = []

        self._copy_arrivals(self.primary_origin, new_origin)
        self._copy_arrivals(self.secondary_origin, new_origin)

        arrival_count = new_origin.arrivalCount() + len(self.unknown_arrivals)
        if arrival_count == self.primary_origin.arrivalCount():
            Logging.info('No new arrivals')
            return None

        OriginMerger._copy_station_magnitudes(self.primary_origin, new_origin)
        OriginMerger._copy_station_magnitudes(self.secondary_origin, new_origin)
        self._copy_magnitudes(self.primary_origin, new_origin)
        if self.primary_origin.magnitudeCount() == 0:
            self._copy_magnitudes(self.secondary_origin, new_origin)

        Logging.info('Origins %s and %s merged' %
                     (self.primary_origin.publicID(),
                      self.secondary_origin.publicID()))

        return new_origin

    def _relocate(self, origin):
        """
        Relocate the origin passed in parameter and return the new
        origin.
        """
        # Load picks for the relocation (even if they aren't passed in
        # parameters)
        picks = []
        for i in xrange(origin.arrivalCount()):
            arrival = origin.arrival(i)
            pick_id = arrival.pickID()
            pick = self.db_query.loadObject(DataModel.Pick.TypeInfo(), pick_id)
            pick = DataModel.Pick.Cast(pick)
            picks.append(pick)

        # Load inventory
        inv = DataModel.Inventory()
        self.db_query.loadNetworks(inv)
        for i in xrange(inv.networkCount()):
            self.db_query.load(inv.network(i))

        # Prepare the locator
        depth_uncertainty = None
        try:
            depth_uncertainty = origin.depth().uncertainty()
        except Core.ValueException:
            pass
        if self.fixed_depth is not None:
            self.locator.useFixedDepth(True)
            self.locator.setFixedDepth(self.fixed_depth)
        elif depth_uncertainty is None or isclose(depth_uncertainty, 0.0):
            self.locator.useFixedDepth(True)
            self.locator.setFixedDepth(origin.depth().value())
        else:
            self.locator.releaseDepth()

        if self.distance_cut_off is not None:
            self.locator.setDistanceCutOff(self.distance_cut_off)
        self.locator.setIgnoreInitialLocation(self.ignore_initial_location)

        # Let's go! Time to relocate!
        try:
            new_origin = self.locator.relocate(origin)
        except Core.GeneralException:
            Logging.error('Error in relocating')
            info = traceback.format_exception(*sys.exc_info())
            for i in info:
                sys.stderr.write(i)
            return None

        # There are some modifications to do on the generated origin
        new_origin.creationInfo().setAgencyID(self.agencyID)
        new_origin.creationInfo().setAuthor(self.author)

        new_origin.setEvaluationMode(self.output_evaluation_mode)
        new_origin.setEvaluationStatus(DataModel.PRELIMINARY)

        # Add arrivals from station not found in the inventory
        for arrival in self.unknown_arrivals:
            # Since these arrivals wasn't used to relocated,
            # put a weight of 0.
            arrival.setWeight(0)
            new_origin.add(arrival)

        # Normally, magnitudes should be recalculated after relocation.
        OriginMerger._copy_magnitudes(origin, new_origin)
        OriginMerger._copy_station_magnitudes(origin, new_origin)

        return new_origin

    def _update_preferred_origin(self, event):
        """
        Create a Journaling notifier to update the preferred origin of
        the event.
        """
        journaling = DataModel.Journaling()
        journal_entry = DataModel.JournalEntry()
        journal_entry.setCreated(Core.Time_GMT())
        journal_entry.setSender(self.author)
        # No doc at all for 'EvPrefOrgAutomatic' (see eventttool.cpp)
        journal_entry.setAction('EvPrefOrgAutomatic')
        journal_entry.setObjectID(event.publicID())
        journaling.add(journal_entry)

    def _remove(self, event, origin):
        """
        Remove the origin from the event and update the database.
        """
        if self.mode_test:
            return

        ep = DataModel.EventParameters()
        self.db_query.loadOrigins(ep)
        self.db_query.loadOriginReferences(event)

        DataModel.Notifier.Enable()

        removed_origin_id = None
        preferred_origin_id = None
        for i in xrange(event.originReferenceCount()):
            origin_reference = event.originReference(i)
            if origin_reference.originID() == origin.publicID():
                removed_origin_id = origin.publicID()
                event.removeOriginReference(i)
            else:
                preferred_origin_id = origin_reference.originID()

        # If the preferred origin is removed, choose an other one
        if preferred_origin_id and \
                event.preferredOriginID() == removed_origin_id:
            event.setPreferredOriginID(preferred_origin_id)
            DataModel.Notifier.Create(ep, DataModel.OP_UPDATE, event)

        ep.remove(origin)

        self._update_preferred_origin(event)

        DataModel.Notifier.Disable()

        message = DataModel.Notifier.GetMessage(True)
        self.connection().send(self.group_remove, message)

    def _send(self, event, origin):
        """
        Add the origin to the event and update the database with the
        new objects.
        """
        if self.mode_test:
            return

        ep = DataModel.EventParameters()

        DataModel.Notifier.Enable()

        ep.add(origin)
        origin_reference = DataModel.OriginReference(origin.publicID())
        event.add(origin_reference)

        DataModel.Notifier.Disable()

        message = DataModel.Notifier.GetMessage(True)
        self.connection().send(message)

    def _process(self, event):
        """
        Merge origins, relocate and write to the database.
        """
        Logging.info('Processing event %s' % event.publicID())

        origin = self._merge_origin(event)

        if origin:
            origin_relocated = self._relocate(origin)

            if not origin_relocated and self.fixed_depth is None:
                # Retry relocation with secondary origin fixed depth.
                # This is not perfect since this second try doesn't
                # depend on the exception catch. It retries too much.
                depth_uncertainty = None
                try:
                    depth_uncertainty = \
                        self.secondary_origin.depth().uncertainty()
                except Core.ValueException:
                    pass
                if depth_uncertainty is None or \
                        isclose(depth_uncertainty, 0.0):
                    origin.setDepth(self.secondary_origin.depth())
                    origin_relocated = self._relocate(origin)

            if origin_relocated:
                Logging.info('Origin %s relocated' %
                             origin_relocated.publicID())
                self._send(event, origin_relocated)
        else:
            Logging.info('Nothing to merge')

    def handleMessage(self, message):
        self.events = []
        # Call addObject, removeObject and updateObject
        Client.Application.handleMessage(self, message)

        Logging.debug("Processed %s events" % len(self.events))
        for event in self.events:
            self._process(event)

    def _process_object(self, parentID, object_):
        try:
            event = DataModel.Event.Cast(object_)
            if not event:
                event = self.db_query.getEventByPublicID(parentID)

            if not event:
                journal_entry = DataModel.JournalEntry.Cast(object_)
                event_id = journal_entry.objectID()
                event = self.db_query.getEventByPublicID(event_id)

            if event and not any(event.publicID() == e.publicID()
                                 for e in self.events):
                self.events.append(event)
        except:
            info = traceback.format_exception(*sys.exc_info())
            for i in info:
                sys.stderr.write(i)
            raise

    def addObject(self, parentID, object_):
        """
        Called when a new object is received.
        """
        self._process_object(parentID, object_)

    def removeObject(self, parentID, object_):
        """
        Called when a object is removed.
        """
        self._process_object(parentID, object_)

    def updateObject(self, parentID, object_):
        """
        Called when an updated object is received.
        """
        self._process_object(parentID, object_)

    def run(self):
        try:
            # Case when an event_id was given in argument
            if self.event_id:
                event = self.db_query.getEventByPublicID(self.event_id)
                if event:
                    self._process(event)
                else:
                    Logging.error(
                        "Can't find event with publicID %s" % self.event_id)

                return True
            # Case when dates were given in argument
            elif self.start_time and self.end_time:
                start_time = Core.Time.FromString(self.start_time, '%FT%T')
                end_time = Core.Time.FromString(self.end_time, '%FT%T')

                event_iterator = self.db_query.getEvents(start_time, end_time)
                events = [event for event in event_iterator]
                # This DB query must be finished before we start iterating over
                # the events as otherwise we get nested queries, which are not
                # allowed.
                for event in events:
                    event = DataModel.Event.Cast(event)

                    if event:
                        self._process(event)

                return True

            # Case without arguments, the application listen the EVENT
            # messaging.
            return Client.Application.run(self)
        except:
            info = traceback.format_exception(*sys.exc_info())
            for i in info:
                sys.stderr.write(i)
            raise

        return False


if __name__ == "__main__":
    app = OriginMerger(len(sys.argv), sys.argv)
    app()
